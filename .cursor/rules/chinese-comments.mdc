---
alwaysApply: true
description: 代码必须提供中文注释，方便后期修改和理解
---

# 中文注释规范

## 注释要求

### 必须提供中文注释的内容

- ✅ 所有类和方法必须有中文注释
- ✅ 复杂逻辑必须有中文说明
- ✅ 重要变量和常量必须有中文注释
- ✅ 算法和业务逻辑必须有中文解释
- ✅ 错误处理和异常情况必须有中文说明
- ✅ 配置参数和选项必须有中文说明

### 注释格式规范

#### 类注释

```kotlin
/**
 * ZY 文件类型定义
 * 基于 TextMate 语法文件 origami.tmLanguage.json
 * 支持 .zy 文件扩展名的语法高亮和代码提示
 */
class ZyFileType : LanguageFileType(ZyLanguage)
```

#### 方法注释

```kotlin
/**
 * 获取 LSP 补全建议
 * @param parameters 补全参数，包含编辑器位置和上下文信息
 * @return 补全建议列表，包含文本、类型和插入处理器
 */
fun getCompletions(parameters: CompletionParameters): List<ZyCompletionItem>
```

#### 变量注释

```kotlin
// LSP 服务器路径，指向外部语言服务器
private val lspServerPath = "/Users/lvluo/Desktop/github.com/php-any/origami/bin/zy-lsp"

// 缓存解析结果，提高性能
private val parseCache = mutableMapOf<String, ParseResult>()
```

#### 复杂逻辑注释

```kotlin
// 处理多行注释 /* */ 的解析
// 需要跳过转义字符和嵌套注释
while (tokenEnd < bufferEnd - 1) {
    if (buffer!![tokenEnd] == '*' && buffer!![tokenEnd + 1] == '/') {
        tokenEnd += 2
        break
    }
    tokenEnd++
}
```

## 注释内容要求

### 功能说明

- 说明方法或类的主要功能
- 解释参数和返回值的含义
- 描述使用场景和注意事项

### 实现细节

- 解释算法的工作原理
- 说明性能优化的考虑
- 描述错误处理的策略

### 配置说明

- 解释配置参数的作用
- 说明默认值和取值范围
- 描述配置变更的影响

### 依赖关系

- 说明与其他组件的关系
- 描述接口和协议的使用
- 解释数据流和控制流

## 注释质量标准

### 准确性

- 注释内容必须与实际代码一致
- 及时更新注释，保持同步
- 避免过时或错误的注释

### 完整性

- 覆盖所有重要的代码逻辑
- 解释所有非显而易见的操作
- 说明所有可能的异常情况

### 可读性

- 使用简洁明了的中文表达
- 避免过于技术化的术语
- 提供足够的上下文信息

## 禁止的注释模式

### 无意义注释

- ❌ `// 设置变量`
- ❌ `// 返回结果`
- ❌ `// 处理数据`

### 英文注释

- ❌ `// TODO: implement LSP completion`
- ❌ `// FIXME: handle error case`
- ❌ `// NOTE: this is important`

### 过时注释

- ❌ `// 临时实现，后续优化`
- ❌ `// 待完善`
- ❌ `// 占位符`

## 注释维护

### 更新时机

- 代码修改时必须同步更新注释
- 功能变更时必须更新相关注释
- 重构时必须检查注释的准确性

### 审查要求

- 代码审查时必须检查注释质量
- 确保注释与代码逻辑一致
- 验证注释的完整性和准确性
