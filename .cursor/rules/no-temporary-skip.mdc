---
alwaysApply: true
description: 禁止使用临时跳过逻辑，必须完整实现所有功能
---

# 完整实现规范

## 禁止临时跳过逻辑

### 不允许的模式
- ❌ `// TODO: 实现 LSP 补全`
- ❌ `// FIXME: 待完善`
- ❌ `// 临时跳过`
- ❌ `throw NotImplementedError()`
- ❌ `return null` (除非是合理的空值)
- ❌ `// 占位符实现`
- ❌ `// 后续实现`

### 必须完整实现的功能

#### LSP 集成
- 完整实现 LSP 客户端连接
- 实现所有 LSP 协议方法
- 处理连接失败和重连逻辑
- 提供完整的错误处理

#### 语法高亮
- 完整实现词法分析器
- 支持所有语法元素高亮
- 实现颜色方案配置
- 提供语法错误标记

#### 代码提示
- 实现完整的补全提供者
- 支持上下文感知补全
- 集成 LSP 补全功能
- 提供补全项排序和过滤

#### 代码跳转
- 实现定义跳转功能
- 支持引用查找
- 提供符号搜索
- 实现类型层次结构导航

## 实现要求

### 错误处理
- 必须处理所有可能的异常情况
- 提供用户友好的错误提示
- 记录详细的错误日志
- 实现优雅的降级机制

### 性能优化
- 实现缓存机制
- 异步处理耗时操作
- 避免阻塞 UI 线程
- 优化内存使用

### 测试覆盖
- 为每个功能编写单元测试
- 实现集成测试
- 提供端到端测试
- 测试错误处理路径

## 代码质量标准

### 完整性检查
- 所有方法必须有完整实现
- 所有接口必须被正确实现
- 所有配置必须被正确设置
- 所有依赖必须被正确处理

### 文档要求
- 所有公共 API 必须有文档
- 复杂逻辑必须有注释说明
- 提供使用示例
- 维护更新日志

## 验收标准

### 功能完整性
- ✅ 所有声明的功能都已实现
- ✅ 所有配置选项都已支持
- ✅ 所有错误情况都已处理
- ✅ 所有性能要求都已满足

### 代码质量
- ✅ 通过所有静态分析检查
- ✅ 代码覆盖率 > 80%
- ✅ 无已知 bug
- ✅ 符合编码规范

### 用户体验
- ✅ 功能响应时间符合要求
- ✅ 错误提示清晰易懂
- ✅ 界面友好直观
- ✅ 支持自定义配置